<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN"><html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en-us">
<title>Coppelia Kinematics Routines, API</title>
<link rel="stylesheet" type="text/css" href="../../helpFiles/style.css">
<script type="text/javascript">
//
function getParameterByName(name, url = window.location.href)
{
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
        results = regex.exec(url);
    if(!results) return null;
    if(!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}
//
                </script><style type="text/css">
td.section { margin: 0; padding: 0; }
                </style></head>
<body>
<div align="center"><table class="allEncompassingTable">

<tr><td id="title" class="section"><h1>Coppelia Kinematics Routines, API reference</h1></td></tr>
<tr><td id="info" class="section"><p class="warningBox">All units, unless otherwise indicated, are specified in meters and radians.</p></td></tr>

<tr><td id="alphabetical" class="section"><pre class="lightGreyBox">
<a href="?#ikAddElement">ikAddElement</a>
<a href="?#ikComputeGroupJacobian">ikComputeGroupJacobian</a>
<a href="?#ikComputeJacobian">ikComputeJacobian</a>
<a href="?#ikCreateDummy">ikCreateDummy</a>
<a href="?#ikCreateEnvironment">ikCreateEnvironment</a>
<a href="?#ikCreateGroup">ikCreateGroup</a>
<a href="?#ikCreateJoint">ikCreateJoint</a>
<a href="?#ikDoesGroupExist">ikDoesGroupExist</a>
<a href="?#ikDoesObjectExist">ikDoesObjectExist</a>
<a href="?#ikDuplicateEnvironment">ikDuplicateEnvironment</a>
<a href="?#ikEraseEnvironment">ikEraseEnvironment</a>
<a href="?#ikEraseObject">ikEraseObject</a>
<a href="?#ikFindConfig">ikFindConfig</a>
<a href="?#ikGetElementBase">ikGetElementBase</a>
<a href="?#ikGetElementConstraints">ikGetElementConstraints</a>
<a href="?#ikGetElementFlags">ikGetElementFlags</a>
<a href="?#ikGetElementPrecision">ikGetElementPrecision</a>
<a href="?#ikGetElementWeights">ikGetElementWeights</a>
<a href="?#ikGetGroupCalculation">ikGetGroupCalculation</a>
<a href="?#ikGetGroupFlags">ikGetGroupFlags</a>
<a href="?#ikGetGroupHandle">ikGetGroupHandle</a>
<a href="?#ikGetGroupJointLimitHits">ikGetGroupJointLimitHits</a>
<a href="?#ikGetGroupJoints">ikGetGroupJoints</a>
<a href="?#ikGetJointDependency">ikGetJointDependency</a>
<a href="?#ikGetJointInterval">ikGetJointInterval</a>
<a href="?#ikGetJointLimitMargin">ikGetJointLimitMargin</a>
<a href="?#ikGetJointMatrix">ikGetJointMatrix</a>
<a href="?#ikGetJointMaxStepSize">ikGetJointMaxStepSize</a>
<a href="?#ikGetJointMode">ikGetJointMode</a>
<a href="?#ikGetJointPosition">ikGetJointPosition</a>
<a href="?#ikGetJointScrewLead">ikGetJointScrewLead</a>
<a href="?#ikGetJointTransformation">ikGetJointTransformation</a>
<a href="?#ikGetJointType">ikGetJointType</a>
<a href="?#ikGetJointWeight">ikGetJointWeight</a>
<a href="?#ikGetLastError">ikGetLastError</a>
<a href="?#ikGetObjectHandle">ikGetObjectHandle</a>
<a href="?#ikGetObjectMatrix">ikGetObjectMatrix</a>
<a href="?#ikGetObjectParent">ikGetObjectParent</a>
<a href="?#ikGetObjects">ikGetObjects</a>
<a href="?#ikGetObjectTransformation">ikGetObjectTransformation</a>
<a href="?#ikGetObjectType">ikGetObjectType</a>
<a href="?#ikGetTargetDummy">ikGetTargetDummy</a>
<a href="?#ikHandleGroups">ikHandleGroups</a>
<a href="?#ikLoad">ikLoad</a>
<a href="?#ikReleaseBuffer">ikReleaseBuffer</a>
<a href="?#ikSave">ikSave</a>
<a href="?#ikSetElementBase">ikSetElementBase</a>
<a href="?#ikSetElementConstraints">ikSetElementConstraints</a>
<a href="?#ikSetElementFlags">ikSetElementFlags</a>
<a href="?#ikSetElementPrecision">ikSetElementPrecision</a>
<a href="?#ikSetElementWeights">ikSetElementWeights</a>
<a href="?#ikSetGroupCalculation">ikSetGroupCalculation</a>
<a href="?#ikSetGroupFlags">ikSetGroupFlags</a>
<a href="?#ikSetJointDependency">ikSetJointDependency</a>
<a href="?#ikSetJointInterval">ikSetJointInterval</a>
<a href="?#ikSetJointLimitMargin">ikSetJointLimitMargin</a>
<a href="?#ikSetJointMaxStepSize">ikSetJointMaxStepSize</a>
<a href="?#ikSetJointMode">ikSetJointMode</a>
<a href="?#ikSetJointPosition">ikSetJointPosition</a>
<a href="?#ikSetJointScrewLead">ikSetJointScrewLead</a>
<a href="?#ikSetJointWeight">ikSetJointWeight</a>
<a href="?#ikSetObjectMatrix">ikSetObjectMatrix</a>
<a href="?#ikSetObjectParent">ikSetObjectParent</a>
<a href="?#ikSetObjectTransformation">ikSetObjectTransformation</a>
<a href="?#ikSetSphericalJointMatrix">ikSetSphericalJointMatrix</a>
<a href="?#ikSetSphericalJointQuaternion">ikSetSphericalJointQuaternion</a>
<a href="?#ikSettargetDummy">ikSetTargetDummy</a>
<a href="?#ikSwitchEnvironment">ikSwitchEnvironment</a></pre></td></tr>

<tr><td id="category" class="section">

<h2><a name="environment"></a>Environment functions and helpers</h2>
<pre class=lightGreyBox>
<a href="?#ikCreateEnvironment">ikCreateEnvironment</a>
<a href="?#ikEraseEnvironment">ikEraseEnvironment</a>
<a href="?#ikDuplicateEnvironment">ikDuplicateEnvironment</a>
<a href="?#ikSave">ikSave</a>
<a href="?#ikLoad">ikLoad</a>
<a href="?#ikSwitchEnvironment">ikSwitchEnvironment</a>
<a href="?#ikGetLastError">ikGetLastError</a>
<a href="?#ikReleaseBuffer">ikReleaseBuffer</a>
</pre>


<h2><a name="objects"></a>Objects</h2>
<pre class=lightGreyBox>
<a href="?#ikGetObjects">ikGetObjects</a>
<a href="?#ikGetObjectHandle">ikGetObjectHandle</a>
<a href="?#ikDoesObjectExist">ikDoesObjectExist</a>
<a href="?#ikEraseObject">ikEraseObject</a>
<a href="?#ikGetObjectParent">ikGetObjectParent</a>
<a href="?#ikSetObjectParent">ikSetObjectParent</a>
<a href="?#ikGetObjectTransformation">ikGetObjectTransformation</a>
<a href="?#ikSetObjectTransformation">ikSetObjectTransformation</a>
<a href="?#ikGetObjectType">ikGetObjectType</a>
<a href="?#ikGetObjectMatrix">ikGetObjectMatrix</a>
<a href="?#ikSetObjectMatrix">ikSetObjectMatrix</a>
</pre>


<h2><a name="dummies"></a>Dummies</h2>
<pre class=lightGreyBox>
<a href="?#ikCreateDummy">ikCreateDummy</a>
<a href="?#ikEraseObject">ikEraseObject</a>
<a href="?#ikGetTargetDummy">ikGetTargetDummy</a>
<a href="?#ikSetTargetDummy">ikSetTargetDummy</a>
</pre>


<h2><a name="joints"></a>Joints</h2>
<pre class=lightGreyBox>
<a href="?#ikCreateJoint">ikCreateJoint</a>
<a href="?#ikEraseObject">ikEraseObject</a>
<a href="?#ikGetJointPosition">ikGetJointPosition</a>
<a href="?#ikSetJointPosition">ikSetJointPosition</a>
<a href="?#ikGetJointMode">ikGetJointMode</a>
<a href="?#ikSetJointMode">ikSetJointMode</a>
<a href="?#ikGetJointInterval">ikGetJointInterval</a>
<a href="?#ikSetJointInterval">ikSetJointInterval</a>
<a href="?#ikGetJointDependency">ikGetJointDependency</a>
<a href="?#ikSetJointDependency">ikSetJointDependency</a>
<a href="?#ikGetJointWeight">ikGetJointWeight</a>
<a href="?#ikSetJointWeight">ikSetJointWeight</a>
<a href="?#ikGetJointLimitMargin">ikGetJointLimitMargin</a>
<a href="?#ikSetJointLimitMargin">ikSetJointLimitMargin</a>
<a href="?#ikGetJointMaxStepSize">ikGetJointMaxStepSize</a>
<a href="?#ikSetJointMaxStepSize">ikSetJointMaxStepSize</a>
<a href="?#ikGetJointScrewLead">ikGetJointScrewLead</a>
<a href="?#ikSetJointScrewLead">ikSetJointScrewLead</a>
<a href="?#ikGetJointTransformation">ikGetJointTransformation</a>
<a href="?#ikSetSphericalJointQuaternion">ikSetSphericalJointQuaternion</a>
<a href="?#ikGetJointType">ikGetJointType</a>
<a href="?#ikGetJointMatrix">ikGetJointMatrix</a>
<a href="?#ikSetSphericalJointMatrix">ikSetSphericalJointMatrix</a>
<a href="?#ikGetGroupJoints">ikGetGroupJoints</a>
</pre>


<h2><a name="ikGroups"></a>IK groups</h2>
<pre class=lightGreyBox>
<a href="?#ikCreateGroup">ikCreateGroup</a>
<a href="?#ikGetGroupHandle">ikGetGroupHandle</a>
<a href="?#ikDoesGroupExist">ikDoesGroupExist</a>
<a href="?#ikGetGroupFlags">ikGetGroupFlags</a>
<a href="?#ikSetGroupFlags">ikSetGroupFlags</a>
<a href="?#ikGetGroupCalculation">ikGetGroupCalculation</a>
<a href="?#ikGetGroupJointLimitHits">ikGetGroupJointLimitHits</a>
<a href="?#ikGetGroupJoints">ikGetGroupJoints</a>
<a href="?#ikSetGroupCalculation">ikSetGroupCalculation</a>
</pre>


<h2><a name="ikElements"></a>IK elements</h2>
<pre class=lightGreyBox>
<a href="?#ikAddElement">ikAddElement</a>
<a href="?#ikGetElementFlags">ikGetElementFlags</a>
<a href="?#ikSetElementFlags">ikSetElementFlags</a>
<a href="?#ikGetElementConstraints">ikGetElementConstraints</a>
<a href="?#ikSetElementConstraints">ikSetElementConstraints</a>
<a href="?#ikGetElementBase">ikGetElementBase</a>
<a href="?#ikSetElementBase">ikSetElementBase</a>
<a href="?#ikGetElementPrecision">ikGetElementPrecision</a>
<a href="?#ikSetElementPrecision">ikSetElementPrecision</a>
<a href="?#ikGetElementWeights">ikGetElementWeights</a>
<a href="?#ikSetElementWeights">ikSetElementWeights</a>
</pre>


<h2><a name="ikCalculation"></a>IK calculation</h2>
<pre class=lightGreyBox>
<a href="?#ikHandleGroups">ikHandleGroups</a>
<a href="?#ikFindConfig">ikFindConfig</a>
<a href="?#ikComputeGroupJacobian">ikComputeGroupJacobian</a>
<a href="?#ikComputeJacobian">ikComputeJacobian</a>
</pre>
</td></tr>

<tr><td id="commands" class="section">
<p class="subsectionBar">
<a name="ikAddIkElement" id="ikAddIkElement"></a><a name="ikAddElement" id="ikAddElement"></a>ikAddElement</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Adds a new IK element to an IK group.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikAddElement(int ikGroupHandle,int tipHandle,int* ikElementHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>tipHandle</strong>: the handle of the dummy object that should act as the tip in the IK element.</div>
<div><strong>ikElementHandle</strong>: the IK element handle in the IK group, in return.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetGroupHandle">ikGetGroupHandle</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikComputeGroupJacobian" id="ikComputeGroupJacobian"></a>ikComputeGroupJacobian</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the Jacobian and error vector for an IK group</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikComputeGroupJacobian(int ikGroupHandle,std::vector<double>* jacobian,std::vector<double>* errorVect)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group</div>
<div><strong>jacobian</strong>: the jacobian in return (row major order). Each row corresponds to one constraint in following order: x, y, z, alpha, beta, gamma. Each column corresponds to one joint, from base to tip. Can be nullptr</div>
<div><strong>errorVect</strong>: the error vector between the target and the tip. Can be nullptr</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikComputeJacobian">ikComputeJacobian</a>, <a href="#ikHandleGroups">ikHandleGroups</a></td>
</tr>
</table>
<br>



<p class="subsectionBar">
<a name="ikComputeJacobian" id="ikComputeJacobian"></a>ikComputeJacobian</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the Jacobian and error vector for a kinematic chain</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikComputeJacobian(int baseHandle,int jointHandle,int constraints,const C7Vector* tipPose,const C7Vector* targetPose,const C7Vector* constrBasePose,std::vector<double>* jacobian,std::vector<double>* errorVect)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>baseHandle</strong>: the handle of the base of the kinematic chain, or -1 for the world</div>
<div><strong>jointHandle</strong>: the handle of the last joint in the kinematic chain, when going from base to tip</div>
<div><strong>constraints</strong>: a combination of following is possible: ik_constraint_x, ik_constraint_y, ik_constraint_z, ik_constraint_alpha_beta, ik_constraint_gamma. For convenience we also have ik_constraint_position=ik_constraint_x|ik_constraint_y|ik_constraint_z, ik_constraint_orientation=ik_constraint_alpha_beta|ik_constraint_gamma, and ik_constraint_pose=ik_constraint_position|ik_constraint_orientation.</div>
<div><strong>tipPose</strong>: the pose of the tip object, relative to the world</div>
<div><strong>targetPose</strong>: the pose of the target object, relative to the world. Can be nullptr, in which case the targetPose is the same as the tipPose</div>
<div><strong>constrBasePose</strong>: the pose that should serve as the reference frame for positional constraints, or nullptr to use the base object instead</div>
<div><strong>jacobian</strong>: the jacobian in return (row major order). Each row corresponds to one constraint in following order: x, y, z, alpha, beta, gamma. Each column corresponds to one joint, from base to tip. Can be nullptr</div>
<div><strong>errorVect</strong>: the error vector between the target and the tip. Can be nullptr</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikComputeGroupJacobian">ikComputeGroupJacobian</a>, <a href="#ikHandleGroups">ikHandleGroups</a></td>
</tr>
</table>
<br>




<p class="subsectionBar">
<a name="ikCreateEnvironment" id="ikCreateEnvironment"></a>ikCreateEnvironment</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates an new IK environment, and switches to it.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikCreateEnvironment(int* environmentHandle=nullptr,int flags=0)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>environmentHandle</strong>: the handle of the newly created environment.</div>
<div><strong>flags</strong>: keep at 0</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikEraseEnvironment">ikEraseEnvironment</a>, <a href="#ikSwitchEnvironment">ikSwitchEnvironment</a>, <a href="#ikDuplicateEnvironment">ikDuplicateEnvironment</a>, <a href="#ikLoad">ikLoad</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikCreateDummy" id="ikCreateDummy"></a>ikCreateDummy</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates a dummy object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikCreateDummy(const char* dummyName/*=nullptr*/,int* dummyHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>dummyName</strong>: the name of the dummy.</div>
<div><strong>dummyHandle</strong>: the handle of the dummy, in return.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikDoesObjectExist">ikDoesObjectExist</a>, <a href="#ikCreateJoint">ikCreateJoint</a>, <a href="#ikEraseObject">ikEraseObject</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikCreateIkGroup" id="ikCreateIkGroup"></a><a name="ikCreateGroup" id="ikCreateGroup"></a>ikCreateGroup</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates an IK group.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikCreateGroup(const char* ikGroupName/*=nullptr*/,int* ikGroupHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupName</strong>: the name of the IK group.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group, in return.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikDoesGroupExist">ikDoesGroupExist</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikCreateJoint" id="ikCreateJoint"></a>ikCreateJoint</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates a joint object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikCreateJoint(const char* jointName/*=nullptr*/,int jointType,int* jointHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointName</strong>: the name of the joint.</div>
<div><strong>jointType</strong>: the type of the joint. supported types are ik_jointtype_revolute, ik_jointtype_prismatic and ik_jointtype_spherical.</div>
<div><strong>jointHandle</strong>: the handle of the joint, in return.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikDoesObjectExist">ikDoesObjectExist</a>, <a href="#ikCreateJoint">ikCreateDummy</a>, <a href="#ikEraseObject">ikEraseObject</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikDoesObjectExist" id="ikDoesObjectExist"></a>ikDoesObjectExist</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Checks whether an object exists, based on its name.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikDoesObjectExist(const char* objectName)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>objectName</strong>: the name of the object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true if the object exists.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikDoesIkGroupExist" id="ikDoesIkGroupExist"></a><a name="ikDoesGroupExist" id="ikDoesGroupExist"></a>ikDoesGroupExist</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Checks whether an IK group exists, based on its name.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikDoesGroupExist(const char* ikGroupName)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupName</strong>: the name of the IK group.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true if the IK group exists.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetGroupHandle">ikGetGroupHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikDuplicateEnvironment" id="ikDuplicateEnvironment"></a>ikDuplicateEnvironment</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Duplicate current IK environment. Can be used to operate on an environment without modifying the original environment</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikDuplicateEnvironment(int* newEnvironmentHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>newEnvironmentHandle</strong>: the handle of the newly created environment.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikEraseEnvironment">ikEraseEnvironment</a>, <a href="#ikSwitchEnvironment">ikSwitchEnvironment</a>, <a href="#ikDuplicateEnvironment">ikDuplicateEnvironment</a>, <a href="#ikCreateEnvironment">ikCreateEnvironment</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikEraseEnvironment" id="ikEraseEnvironment"></a>ikEraseEnvironment</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Erases an IK environment, and switches to another environment, if available.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikEraseEnvironment(int* switchedEnvironmentHandle=nullptr)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>switchedEnvironmentHandle</strong>: the handle of the environment that was switched to, or -1 if there is no environment left.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikCreateEnvironment">ikCreateEnvironment</a>, <a href="#ikSwitchEnvironment">ikSwitchEnvironment</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikEraseObject" id="ikEraseObject"></a>ikEraseObject</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Erases an object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikEraseObject(int objectHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>objectHandle</strong>: handle of the object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetObjectHandle">ikGetObjectHandle</a>, <a href="#ikCreateDummy">ikCreateDummy</a>, <a href="#ikCreateJoint">ikCreateJoint</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikFindConfig" id="ikFindConfig"></a>ikFindConfig</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Searches for a manipulator configuration that matches a given end-effector position/orientation in space. Search is randomized.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">int ikFindConfig(int ikGroupHandle,size_t jointCnt,const int* jointHandles,double thresholdDist,int maxSearchTimeInMs,double* retConfig,const double* metric=nullptr,bool(*validationCallback)(double*)=nullptr)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>jointCnt</strong>: the number of joint handles provided in the jointHandles array.</div>
<div><strong>jointHandles</strong>: an array with jointCnt entries, that specifies the joint handles for the joints we wish to retrieve the values calculated by the IK.</div>
<div><strong>thresholdDist</strong>: a distance indicating when IK should be computed in order to try to bring the tip onto the target: since the search algorithm proceeds by generating random configurations, many of them produce a tip pose that is too far from the target pose to run IK successfully. Choosing a large value will result in slow calculations, choosing a small value might produce a smaller subset of solutions. Distance between two poses is calculated using a metric (see metric argument below).</div>
<div><strong>maxSearchTimeInMs</strong>: the maximum time in milliseconds before this function returns.</div>
<div><strong>retConfig</strong>: an array with jointCnt entries, that will receive the IK calculated joint values, as specified by the jointHandles array.</div>
<div><strong>metric</strong>: an array to 4 values indicating a metric used to compute pose-pose distances: distance=sqrt((dx*metric[0])^2+(dy*metric[1])^2+(dz*metric[2])^2+(angle*metric[3])^2).</div>
<div><strong>validationCallback</strong>: a callback function taking as input argument the proposed joint values (i.e. a configuration), and as return value whether the configuration is valid (e.g. is not colliding).</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">-1 in case of an error, 0 if no valid configuration was found, 1 otherwise.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikComputeJacobian">ikComputeJacobian</a>, <a href="#ikDuplicateEnvironment">ikDuplicateEnvironment</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetConfigForTipPose" id="ikGetConfigForTipPose"></a>ikGetConfigForTipPose</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Deprecated. Use ikFindConfig instead.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">int ikGetConfigForTipPose(int ikGroupHandle,size_t jointCnt,const int* jointHandles,double thresholdDist,int maxIterations,double* retConfig,const double* metric=nullptr,bool(*validationCallback)(double*)=nullptr,const int* jointOptions=nullptr,const double* lowLimits=nullptr,const double* ranges=nullptr)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>jointCnt</strong>: the number of joint handles provided in the jointHandles array.</div>
<div><strong>jointHandles</strong>: an array with jointCnt entries, that specifies the joint handles for the joints we wish to retrieve the values calculated by the IK.</div>
<div><strong>thresholdDist</strong>: a distance indicating when IK should be computed in order to try to bring the tip onto the target: since the search algorithm proceeds by generating random configurations, many of them produce a tip pose that is too far from the target pose to run IK successfully. Choosing a large value will result in slow calculations, choosing a small value might produce a smaller subset of solutions. Distance between two poses is calculated using a metric (see metric argument below).</div>
<div><strong>maxIterations</strong>: the maximum number of iterations before this function returns. Alternatively, one can specify an upper time limit, in milliseconds, after which the function returns with maxIterations=-timeLimitInMs.</div>
<div><strong>retConfig</strong>: an array with jointCnt entries, that will receive the IK calculated joint values, as specified by the jointHandles array.</div>
<div><strong>metric</strong>: an array to 4 values indicating a metric used to compute pose-pose distances: distance=sqrt((dx*metric[0])^2+(dy*metric[1])^2+(dz*metric[2])^2+(angle*metric[3])^2).</div>
<div><strong>validationCallback</strong>: a callback function taking as input argument the proposed joint values (i.e. a configuration), and as return value whether the configuration is valid (e.g. is not colliding).</div>
<div><strong>jointOptions</strong>: a bit-coded value corresponding to each specified joint handle. Bit 0 (i.e. 1) indicates the corresponding joint is dependent of another joint.</div>
<div><strong>lowLimits</strong>: an optional array pointing to different low limit values for each specified joint. This can be useful when you wish to explore a sub-set of the joint's intervals.</div>
<div><strong>ranges</strong>: an optional array pointing to different range values for each specified joint. This can be useful when you wish to explore a sub-set of the joint's intervals. If the range value is 0, then the lowLimit and range values are taken from the joint's properties. If the range value is negative, then the search interval will be centered around the current joint linear/angular position, with an extent of (-range).</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">-1 in case of an error, 0 if no valid configuration was found, 1 otherwise.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikComputeJacobian">ikComputeJacobian</a>, <a href="#ikDuplicateEnvironment">ikDuplicateEnvironment</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetIkElementBase" id="ikGetIkElementBase"></a><a name="ikGetElementBase" id="ikGetElementBase"></a>ikGetElementBase</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the base object of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetElementBase(int ikGroupHandle,int ikElementHandle,int* baseHandle,int* constraintsBaseHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>ikElementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy|ik_handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
<div><strong>baseHandle</strong>: the handle of the base object, in return, or -1 if the world is the base.</div>
<div><strong>constraintsBaseHandle</strong>: the handle of the constraints base object, in return, relative to which the constraints are specified. Returns -1 if the constraints are relative to the base object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetElementBase">ikSetElementBase</a>, <a href="#ikGetGroupHandle">ikGetGroupHandle</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetIkElementConstraints" id="ikGetIkElementConstraints"></a><a name="ikGetElementConstraints" id="ikGetElementConstraints"></a>ikGetElementConstraints</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the constraints of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetElementConstraints(int ikGroupHandle,int ikElementHandle,int* constraints)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>ikElementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy|ik_handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
<div><strong>constraints</strong>: the constraints, in return. A combination of following is possible: ik_constraint_x, ik_constraint_y, ik_constraint_z, ik_constraint_alpha_beta, ik_constraint_gamma. For convenience we also have ik_constraint_position=ik_constraint_x|ik_constraint_y|ik_constraint_z, ik_constraint_orientation=ik_constraint_alpha_beta|ik_constraint_gamma, and ik_constraint_pose=ik_constraint_position|ik_constraint_orientation.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetElementConstraints">ikSetElementConstraints</a>, <a href="#ikGetGroupHandle">ikGetGroupHandle</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetIkElementFlags" id="ikGetIkElementFlags"></a><a name="ikGetElementFlags" id="ikGetElementFlags"></a>ikGetElementFlags</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves various flags of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetElementFlags(int ikGroupHandle,int ikElementHandle,int* flags)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>ikElementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy|ik_handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
<div><strong>flags</strong>: bit-coded flags, in return: bit0 set (1): the enabled state of the ik element.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetElementFlags">ikSetElementFlags</a>, <a href="#ikGetGroupHandle">ikGetGroupHandle</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetIkElementPrecision" id="ikGetIkElementPrecision"></a><a name="ikGetElementPrecision" id="ikGetElementPrecision"></a>ikGetElementPrecision</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the precision settings of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetElementPrecision(int ikGroupHandle,int ikElementHandle,double* linearPrecision,double* angularPrecision)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>ikElementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy|ik_handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
<div><strong>linearPrecision</strong>: the required linear precision, in return.</div>
<div><strong>angularPrecision</strong>: the required angular precision, in return.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetElementPrecision">ikSetElementPrecision</a>, <a href="#ikGetGroupHandle">ikGetGroupHandle</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetIkElementWeights" id="ikGetIkElementWeights"></a><a name="ikGetElementWeights" id="ikGetElementWeights"></a>ikGetElementWeights</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the desired linear and angular resolution weights of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetElementWeights(int ikGroupHandle,int ikElementHandle,double* linearWeight,double* angularWeight,double* elementWeight=nullptr)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>ikElementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy|ik_handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
<div><strong>linearWeight</strong>: the linear resolution weight, in return.</div>
<div><strong>angularWeight</strong>: the angular resolution weight, in return.</div>
<div><strong>elementWeight</strong>: the overall weight for that IK element, in return.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetElementWeights">ikSetElementWeights</a>, <a href="#ikGetGroupHandle">ikGetGroupHandle</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetIkGroupCalculation" id="ikGetIkGroupCalculation"></a><a name="ikGetGroupCalculation" id="ikGetGroupCalculation"></a>ikGetGroupCalculation</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves calculation properties for an IK group.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetGroupCalculation(int ikGroupHandle,int* method,double* damping,int* maxIterations)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>method</strong>: the resolution method, in return. Possible values are ik_method_pseudo_inverse (features a tiny bit of hard-coded damping), ik_method_undamped_pseudo_inverse, ik_method_damped_least_squares and ik_method_jacobian_transpose.</div>
<div><strong>damping</strong>: the damping, in case the resolution method is ik_method_damped_least_squares, in return.</div>
<div><strong>maxIterations</strong>: the maximum number of iterations, in return.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetGroupCalculation">ikSetGroupCalculation</a>, <a href="#ikGetGroupHandle">ikGetGroupHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetIkGroupFlags" id="ikGetIkGroupFlags"></a><a name="ikGetGroupFlags" id="ikGetGroupFlags"></a>ikGetGroupFlags</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves flags of an IK group.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetGroupFlags(int ikGroupHandle,int* flags)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>flags</strong>: the flags of the IK group, in return, bit-coded:</div>
<div class="tabTab">ik_group_enabled: the group's enabled state</div>
<div class="tabTab">ik_group_ignoremaxsteps: the joints' max step sizes are ignored. Otherwise, when detected, an interpolation factor (originally at 1.0) is successively divided by 2.0 until the max. step sizes are respected</div>
<div class="tabTab">ik_group_restoreonbadlintol: the IK world state is left untouched if the linear precision is not reached</div>
<div class="tabTab">ik_group_restoreonbadangtol: the IK world state is left untouched if the angular precision is not reached</div>
<div class="tabTab">ik_group_avoidlimits: joint limits are actively avoided</div>
<div class="tabTab">ik_group_stoponlimithit: calculation ends when a joint limit is hit</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetGroupFlags">ikSetGroupFlags</a>, <a href="#ikGetGroupHandle">ikGetGroupHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetIkGroupHandle" id="ikGetIkGroupHandle"></a><a name="ikGetGroupHandle" id="ikGetGroupHandle"></a>ikGetGroupHandle</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the handle of an IK group based on its name.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetGroupHandle(const char* ikGroupName,int* ikGroupHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupName</strong>: the name of the IK group.</div>
<div><strong>ikGroupHandle</strong>: the returned IK group handle.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikDoesGroupExist">ikDoesGroupExist</a>, <a href="#ikCreateGroup">ikCreateGroup</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetIkGroupJointLimitHits" id="ikGetIkGroupJointLimitHits"></a><a name="ikGetGroupJointLimitHits" id="ikGetGroupJointLimitHits"></a>ikGetGroupJointLimitHits</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Checks which joints of an IK group hit a limit last time that IK group was handled</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetGroupJointLimitHits(int ikGroupHandle,std::vector&lt;int&gt;* jointHandles,std::vector&lt;double&gt;* underOrOvershots)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>jointHandles</strong>: the joint handles that that had joint limits under- or overshot. Can be null</div>
<div><strong>underOrOvershots</strong>: the corresponding under- or overshots, for each of the jointHandles. Can be null</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetGroupFlags">ikSetGroupFlags</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetGroupJoints" id="ikGetGroupJoints"></a>ikGetGroupJoints</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Returns the joint handles involved in the IK group calculation, i.e. one handle per Jacobian column (except with revolute joints that have 3 corresponding Jacobian columns)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetGroupJoints(int ikGroupHandle,std::vector&lt;int&gt;* jointHandles)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>jointHandles</strong>: the joint handles</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetJointDependency" id="ikGetJointDependency"></a>ikGetJointDependency</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves information about a possible joint dependency.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetJointDependency(int jointHandle,int* dependencyJointHandle,double* offset,double* mult)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>dependencyJointHandle</strong>: the handle of the dependency joint, in return.</div>
<div><strong>offset</strong>: the offset, in return. We have joint linear/angular position = dependency joint linear/angular position * mult + offset.</div>
<div><strong>mult</strong>: the multiplication factor, in return. We have joint linear/angular position = dependency joint linear/angular position * mult + offset.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetJointDependency">ikSetJointDependency</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetJointIkWeight" id="ikGetJointIkWeight"></a><a name="ikGetJointWeight" id="ikGetJointWeight"></a>ikGetJointWeight</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the IK weight of a joint, i.e. the weight it has during IK resolution.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetJointWeight(int jointHandle,double* ikWeight)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>ikWeight</strong>: the IK weight, in return.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetJointWeight">ikSetJointWeight</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetJointInterval" id="ikGetJointInterval"></a>ikGetJointInterval</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the joint limits.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetJointInterval(int jointHandle,bool* cyclic,double* intervalMinAndRange)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>cyclic</strong>: whether the joint is cyclic (has no limits).</div>
<div><strong>intervalMinAndRange</strong>: a pointer to two values: the joint lower limit, and the joint range (i.e. joint upper limit = joint lower limit + joint range)</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetJointInterval">ikSetJointInterval</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetJointLimitMargin" id="ikGetJointLimitMargin"></a>ikGetJointLimitMargin</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the limit margin of a joint, i.e. the threshold that will be used to counteract on joint limit violation during IK resolution, if the appropriate IK group flag was set.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetJointLimitMargin(int jointHandle,double* margin)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>margin</strong>: the margin, in return.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetJointLimitMargin">ikSetJointLimitMargin</a>, <a href="#ikGetGroupFlags">ikGetGroupFlags</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetJointMatrix" id="ikGetJointMatrix"></a>ikGetJointMatrix</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the intrinsic transformation matrix of a joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetJointMatrix(int jointHandle,C4X4Matrix* matrix)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>matrix</strong>: the transformation matrix, in return.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetSphericalJointMatrix">ikSetSphericalJointMatrix</a>, <a href="#ikGetJointPosition">ikGetJointPosition</a>, <a href="#ikGetJointTransformation">ikGetJointTransformation</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetJointMaxStepSize" id="ikGetJointMaxStepSize"></a>ikGetJointMaxStepSize</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the maximum step size of a joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetJointMaxStepSize(int jointHandle,double* maxStepSize)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>maxStepSize</strong>: the maximum step size, in return.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetJointMaxStepSize">ikSetJointMaxStepSize</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetJointMode" id="ikGetJointMode"></a>ikGetJointMode</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the joint mode.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetJointMode(int jointHandle,int* mode)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>mode</strong>: the joint mode, in return. Possible values are: ik_jointmode_passive, ik_jointmode_ik</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">

<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetJointMode">ikSetJointMode</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetJointPosition" id="ikGetJointPosition"></a>ikGetJointPosition</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the position (linear or angular) of a joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetJointPosition(int jointHandle,double* position)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>position</strong>: the position, in return.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetJointPosition">ikSetJointPosition</a>, <a href="#ikGetJointMatrix">ikGetJointMatrix</a>, <a href="#ikGetJointTransformation">ikGetJointTransformation</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetJointScrewLead" id="ikGetJointScrewLead"></a><a name="ikGetJointScrewPitch" id="ikGetJointScrewPitch"></a>ikGetJointScrewLead</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the screw lead of a revolute joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetJointScrewLead(int jointHandle,double* lead)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>lead</strong>: the screw lead of the joint, in return. A lead value of zero represents a revolute joint, a value different from zero represents a screw.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetJointScrewLead">ikSetJointScrewLead</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetJointTransformation" id="ikGetJointTransformation"></a>ikGetJointTransformation</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the intrinsic transformation of a joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetJointTransformation(int jointHandle,C7Vector* transf)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>transf</strong>: the transformation, in return.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetSphericalJointQuaternion">ikSetSphericalJointQuaternion</a>, <a href="#ikGetJointPosition">ikGetJointPosition</a>, <a href="#ikGetJointMatrix">ikGetJointMatrix</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetJointType" id="ikGetJointType"></a>ikGetJointType</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the joint type.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetJointType(int jointHandle,int* jointType)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>jointType</strong>: the joint type, in return. Possible values are: ik_jointtype_revolute, ik_jointtype_prismatic and ik_jointtype_spherical.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">

<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikCreateJoint">ikCreateJoint</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetLastError" id="ikGetLastError"></a>ikGetLastError</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves and clears the last error string.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">std::string ikGetLastError()</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">The error string.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetLinkedDummy" id="ikGetLinkedDummy"></a>ikGetLinkedDummy</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Deprecated. Use <a href="#ikGetTargetDummy">ikGetTargetDummy</a> instead</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetLinkedDummy(int dummyHandle,int* linkedDummyHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>dummyHandle</strong>: the handle of the dummy object.</div>
<div><strong>linkedDummyHandle</strong>: the handle of the linked dummy object, in return. Is -1 if no dummy object is linked to this one.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetLinkedDummy">ikSetLinkedDummy</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetObjectHandle" id="ikGetObjectHandle"></a>ikGetObjectHandle</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the handle of an object based on its name.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetObjectHandle(const char* objectName,int* objectHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>objectName</strong>: the name of the object.</div>
<div><strong>objectHandle</strong>: the returned object handle.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikDoesObjectExist">ikDoesObjectExist</a>, <a href="#ikCreateDummy">ikCreateDummy</a>, <a href="#ikCreateJoint">ikCreateJoint</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetObjectMatrix" id="ikGetObjectMatrix"></a>ikGetObjectMatrix</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the transformation matrix of an object. If the object is a joint object, the matrix does not include the joint's intrinsic transformation.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetObjectMatrix(int objectHandle,int relativeToObjectHandle,C4X4Matrix* matrix)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>objectHandle</strong>: the handle of the object.</div>
<div><strong>relativeToObjectHandle</strong>: the handle of an object relative to which we want the matrix expressed. Otherwise, specify ik_handle_world if you want the absolute matrix, or ik_handle_parent if you want the matrix relative to the parent object.</div>
<div><strong>matrix</strong>: a pointer to 12 values representing the transformation matrix (the last row of the 4x4 matrix (0,0,0,1) is omitted)</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetObjectMatrix">ikSetObjectMatrix</a>, <a href="#ikGetObjectTransformation">ikGetObjectTransformation</a>, <a href="#ikGetJointTransformation">ikGetJointTransformation</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetObjectParent" id="ikGetObjectParent"></a>ikGetObjectParent</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves an object's parent handle.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetObjectParent(int objectHandle,int* parentObjectHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>objectHandle</strong>: the handle of the object.</div>
<div><strong>parentObjectHandle</strong>: the returned handle of the parent, or -1 if the object has no parent.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetObjectParent">ikSetObjectParent</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetObjects" id="ikGetObjects"></a>ikGetObjects</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Allows to loop through all objects in the environment.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetObjects(size_t index,int* objectHandle=nullptr,std::string* objectName=nullptr,bool* isJoint=nullptr,int* jointType=nullptr)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>index</strong>: the zero-based index. Start at 0, and increment until the return value is false, in order to loop through all objects in the environment.</div>
<div><strong>objectHandle</strong>: the handle of the object, in return.</div>
<div><strong>objectName</strong>: the name of the object, in return.</div>
<div><strong>isJoint</strong>: whether the object is a joint, in return.</div>
<div><strong>jointType</strong>: the type of joint, in return, if the object at the specified index is a joint. Possible values are ik_jointtype_revolute, ik_jointtype_prismatic or ik_jointtype_spherical.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">false in case of an error, or if no object exists at the specified index.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetObjectHandle">ikGetObjectHandle</a>, <a href="#ikDoesObjectExist">ikDoesObjectExist</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetObjectTransformation" id="ikGetObjectTransformation"></a>ikGetObjectTransformation</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the transformation (position and quaternion) of an object. If the object is a joint object, the transformation does not include the joint's intrinsic transformation.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetObjectTransformation(int objectHandle,int relativeToObjectHandle,C7Vector* transf)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>objectHandle</strong>: the handle of the object.</div>
<div><strong>relativeToObjectHandle</strong>: the handle of an object relative to which we want the transformation expressed. Otherwise, specify ik_handle_world if you want the absolute transformation, or ik_handle_parent if you want the transformation relative to the parent object.</div>
<div><strong>transf</strong>: a pointer to the transformation that will be returned.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetObjectTransformation">ikSetObjectTransformation</a>, <a href="#ikGetObjectMatrix">ikGetObjectMatrix</a>, <a href="#ikGetJointTransformation">ikGetJointTransformation</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetObjectType" id="ikGetObjectType"></a>ikGetObjectType</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the type of an object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetObjectType(int objectHandle,int* objectType)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>objectHandle</strong>: the handle of the object.</div>
<div><strong>objectType</strong>: the returned type of the object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikGetTargetDummy" id="ikGetTargetDummy"></a>ikGetTargetDummy</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the handle of the target dummy associated with a tip dummy</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikGetTargetDummy(int tipDummyHandle,int* targetDummyHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>tipDummyHandle</strong>: the handle of the tip dummy</div>
<div><strong>targetDummyHandle</strong>: the handle of the target dummy, in return. Is -1 if no target is associated with the tip dummy</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSetTargetDummy">ikSetTargetDummy</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikHandleIkGroup" id="ikHandleIkGroup"></a><a name="ikHandleGroups" id="ikHandleGroups"></a>ikHandleGroups</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Handles (i.e. computes/resolves) one or several IK groups</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikHandleGroups(const std::vector<int>* ikGroupHandles,int* result=nullptr,double* precision,int(*cb)(const int*,double*,const int*,const int*,const int*,const int*,double*,double*,double*)=nullptr)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandles</strong>: the handles of the IK groups. If one handle is specified, then a simple IK calculation is performed. If more than one handle is specified, then a projected IK computation is performed, where each group calculation result is projected into the previous group's null space, i.e. dq=dq0+NP0*(dq1+NP1*(dq2+NP2*(...))), where dqi is the result of i-th task's IK (i.e. typically J#*e), and NPi is the i-th task's I-J#*J</div>
<div><strong>result</strong>: the bit-coded execution result, in return. Possible values are ik_calc_notperformed, ik_calc_cannotinvert, ik_calc_notwithintolerance, ik_calc_stepstoobig, ik_calc_limithit. Can be nullptr</div>
<div><strong>precision</strong>: a pointer to 2 values, receiving the largest linear and angular distance between all tip-target pairs. Can be nullptr</div>
<div><strong>cb</strong>: an optional callback address that allows to inspect and manipulate the generated jacobians and error vector:</div>
<div>int jacobianCallback(const int jacobianSize[2],double* jacobian,const int* rowConstraints,const int* rowIkElements,const int* colHandles,const int* colStages,double* errorVector,double* qVector,double* jacobianPseudoinverse)</div>
<div></div>
<div>The return value is bit-coded: bit0=qVector is provided, bit1=jacobianPseudoinverse is provided. jacobian and errorVector can be modified, and qVector can be set (set also return bit0 in that case). If jacobianPseudoinverse is provided (set also return bit1 in that case), then if qVector is not provided, qVector will be computed simply like: qVector=jacobianPseudoinverse*errorVector. If qVector and jacobianPseudoinverse are not provided, then internal calculations are used.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of execution success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikComputeJacobian">ikComputeJacobian</a>, <a href="#ikFindConfig">ikFindConfig</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikLoad" id="ikLoad"></a>ikLoad</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Loads kinematic content previously exported with <a href="#ikSave">ikSave</a>. Make sure that the environment is empty before calling this function.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikLoad(const unsigned char* data,size_t dataLength)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>data</strong>: a pointer to a buffer with the kinematic content.</div>
<div><strong>dataLength</strong>: the size of the kinematic content buffer.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikSave">ikSave</a>, <a href="#ikCreateEnvironment">ikCreateEnvironment</a>, <a href="#ikEraseEnvironment">ikEraseEnvironment</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikReleaseBuffer" id="ikReleaseBuffer"></a>ikReleaseBuffer</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Releases a buffer allocated by the specific API functions.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">void ikReleaseBuffer(void* buffer)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>buffer</strong>: the buffer to release.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet"></td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSave" id="ikSave"></a>ikSave</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Saves the kinematic content in the current environment.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">unsigned char* ikSave(size_t* dataLength)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>dataLength</strong>: the size of the kinematic content buffer.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">a pointer to a buffer with the kinematic content. The user is in charge of releasing the buffer with <a href="#ikReleaseBuffer">ikReleaseBuffer</a></td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikLoad">ikLoad</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetIkElementBase" id="ikSetIkElementBase"></a><a name="ikSetElementBase" id="ikSetElementBase"></a>ikSetElementBase</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the base object of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetElementBase(int ikGroupHandle,int ikElementHandle,int baseHandle,int constraintsBaseHandle=-1)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>ikElementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy|ik_handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
<div><strong>baseHandle</strong>: the handle of the base object, or -1 if the world is the base.</div>
<div><strong>constraintsBaseHandle</strong>: the handle of the constraints base object, relative to which the constraints are specified. Set to -1 to have the constraints relative to the base object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetElementBase">ikGetElementBase</a>, <a href="#ikGetGroupHandle">ikGetGroupHandle</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetIkElementConstraints" id="ikSetIkElementConstraints"></a><a name="ikSetElementConstraints" id="ikSetElementConstraints"></a>ikSetElementConstraints</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the constraints of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetElementConstraints(int ikGroupHandle,int ikElementHandle,int constraints)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>ikElementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy|ik_handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
<div><strong>constraints</strong>: the constraints. Combine following: ik_constraint_x, ik_constraint_y, ik_constraint_z, ik_constraint_alpha_beta, ik_constraint_gamma (ik_constraint_gamma should only be set if ik_constraint_alpha_beta is also set). For convenience we also have ik_constraint_position=ik_constraint_x|ik_constraint_y|ik_constraint_z, ik_constraint_orientation=ik_constraint_alpha_beta|ik_constraint_gamma, and ik_constraint_pose=ik_constraint_position|ik_constraint_orientation.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetElementConstraints">ikGetElementConstraints</a>, <a href="#ikGetGroupHandle">ikGetGroupHandle</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetIkElementFlags" id="ikSetIkElementFlags"></a><a name="ikSetElementFlags" id="ikSetElementFlags"></a>ikSetElementFlags</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets various flags for an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetElementFlags(int ikGroupHandle,int ikElementHandle,int flags)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>ikElementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy|ik_handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
<div><strong>flags</strong>: bit-coded flags: bit0 set (1): the enabled state of the ik element.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetElementFlags">ikGetElementFlags</a>, <a href="#ikGetGroupHandle">ikGetGroupHandle</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetIkElementPrecision" id="ikSetIkElementPrecision"></a><a name="ikSetElementPrecision" id="ikSetElementPrecision"></a>ikSetElementPrecision</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the desired precision of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetElementPrecision(int ikGroupHandle,int ikElementHandle,double linearPrecision,double angularPrecision)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>ikElementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy|ik_handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
<div><strong>linearPrecision</strong>: the required linear precision.</div>
<div><strong>angularPrecision</strong>: the required angular precision.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetElementPrecision">ikGetElementPrecision</a>, <a href="#ikGetGroupHandle">ikGetGroupHandle</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetIkElementWeights" id="ikSetIkElementWeights"></a><a name="ikSetElementWeights" id="ikSetElementWeights"></a>ikSetElementWeights</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the desired linear and angular resolution weights of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetElementWeights(int ikGroupHandle,int ikElementHandle,double linearWeight,double angularWeight,double elementWeight)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>ikElementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy|ik_handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
<div><strong>linearWeight</strong>: the desired linear resolution weight.</div>
<div><strong>angularWeight</strong>: the desired angular resolution weight.</div>
<div><strong>elementWeight</strong>: the desired overall weight for that IK element.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetElementWeights">ikGetElementWeights</a>, <a href="#ikGetGroupHandle">ikGetGroupHandle</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetIkGroupCalculation" id="ikSetIkGroupCalculation"></a><a name="ikSetGroupCalculation" id="ikSetGroupCalculation"></a>ikSetGroupCalculation</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets calculation properties for an IK group.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetGroupCalculation(int ikGroupHandle,int method,double damping,int maxIterations)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>method</strong>: the resolution method. Possible values are ik_method_pseudo_inverse (features a tiny bit of hard-coded damping), ik_method_undamped_pseudo_inverse, ik_method_damped_least_squares and ik_method_jacobian_transpose.</div>
<div><strong>damping</strong>: the damping, in case the resolution method is ik_method_damped_least_squares.</div>
<div><strong>maxIterations</strong>: the maximum number of iterations.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetGroupCalculation">ikGetGroupCalculation</a>, <a href="#ikGetGroupHandle">ikGetGroupHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetIkGroupFlags" id="ikSetIkGroupFlags"></a><a name="ikSetGroupFlags" id="ikSetGroupFlags"></a>ikSetGroupFlags</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets flags of an IK group.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetGroupFlags(int ikGroupHandle,int flags)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>flags</strong>: the flags of the IK group bit-coded:</div>
<div class="tabTab">ik_group_enabled: the group's enabled state</div>
<div class="tabTab">ik_group_ignoremaxsteps: the joints' max step sizes are ignored. Otherwise, when detected, an interpolation factor (originally at 1.0) is successively divided by 2.0 until the max. step sizes are respected</div>
<div class="tabTab">ik_group_restoreonbadlintol: the IK world state is left untouched if the linear precision is not reached</div>
<div class="tabTab">ik_group_restoreonbadangtol: the IK world state is left untouched if the angular precision is not reached</div>
<div class="tabTab">ik_group_avoidlimits: joint limits are actively avoided</div>
<div class="tabTab">ik_group_stoponlimithit: calculation ends when a joint limit is hit</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetGroupFlags">ikGetGroupFlags</a>, <a href="#ikGetGroupHandle">ikGetGroupHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetJointDependency" id="ikSetJointDependency"></a>ikSetJointDependency</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets information about a possible dependent joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetJointDependency(int jointHandle,int dependencyJointHandle,double offset=0.0,double mult=1.0,double(*cb)(int ikEnv,int slaveJoint,double masterPos)=nullptr)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>dependencyJointHandle</strong>: the handle of the joint, this joint is dependent of. -1 to disable.</div>
<div><strong>offset</strong>: the offset. We have joint linear/angular position = dependency joint linear/angular position * mult + offset</div>
<div><strong>mult</strong>: the multiplication factor. We have joint linear/angular position = dependency joint linear/angular position * mult + offset</div>
<div><strong>cb</strong>: an optional callback address that allows to provide a custom dependency function:</div>
<div>double dependencyCallback(int ikEnv,int slaveJointHandle,double masterJointPosition)</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetJointDependency">ikGetJointDependency</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetJointIkWeight" id="ikSetJointIkWeight"></a><a name="ikSetJointWeight" id="ikSetJointWeight"></a>ikSetJointWeight</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the IK weight of a joint, i.e. the weight it has during IK resolution.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetJointWeight(int jointHandle,double ikWeight)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>ikWeight</strong>: the IK weight.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetJointWeight">ikGetJointWeight</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetJointInterval" id="ikSetJointInterval"></a>ikSetJointInterval</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the joint limits.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetJointInterval(int jointHandle,bool cyclic,const double* intervalMinAndRange=nullptr)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>cyclic</strong>: whether the joint is cyclic (has no limits). Only revolute joints can be cyclic.</div>
<div><strong>intervalMinAndRange</strong>: a pointer to two values: the joint lower limit, and the joint range (i.e. joint upper limit = joint lower limit + joint range)</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetJointInterval">ikGetJointInterval</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetJointLimitMargin" id="ikSetJointLimitMargin"></a>ikSetJointLimitMargin</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the limit margin of a joint, i.e. the the threshold that will be used to counteract on joint limit violation during IK resolution, if the appropriate IK group flag was set.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetJointLimitMargin(int jointHandle,double margin)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>margin</strong>: the margin.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetJointLimitMargin">ikGetJointLimitMargin</a>, <a href="#ikGetGroupFlags">ikGetGroupFlags</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetJointMaxStepSize" id="ikSetJointMaxStepSize"></a>ikSetJointMaxStepSize</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the maximum step size of a joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetJointMaxStepSize(int jointHandle,double maxStepSize)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>maxStepSize</strong>: the maximum step size.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetJointMaxStepSize">ikGetJointMaxStepSize</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetJointMode" id="ikSetJointMode"></a>ikSetJointMode</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the joint mode.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetJointMode(int jointHandle,int jointMode)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>jointMode</strong>: the joint mode. Allowed values are: ik_jointmode_passive, ik_jointmode_ik</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetJointMode">ikGetJointMode</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetJointPosition" id="ikSetJointPosition"></a>ikSetJointPosition</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the position (linear or angular) of a joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetJointPosition(int jointHandle,double position)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>position</strong>: the position.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetJointPosition">ikGetJointPosition</a>, <a href="#ikSetSphericalJointMatrix">ikSetSphericalJointMatrix</a>, <a href="#ikSetSphericalJointQuaternion">ikSetSphericalJointQuaternion</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetJointScrewLead" id="ikSetJointScrewLead"></a><a name="ikSetJointScrewPitch" id="ikSetJointScrewPitch"></a>ikSetJointScrewLead</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the screw lead, in case of a revolute joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetJointScrewLead(int jointHandle,double lead)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>lead</strong>: the screw lead of the joint. A lead value of zero represents a revolute joint, a value different from zero represents a screw.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetJointScrewLead">ikGetJointScrewLead</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetLinkedDummy" id="ikSetLinkedDummy"></a>ikSetLinkedDummy</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Deprecated. Use <a href="#ikSetTargetDummy">ikSetTargetDummy instead</a></td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetLinkedDummy(int dummyHandle,int linkedDummyHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>dummyHandle</strong>: the handle of the dummy object.</div>
<div><strong>linkedDummyHandle</strong>: the handle of the dummy object to be linked, or -1 to detach this dummy object from a linked dummy object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetLinkedDummy">ikGetLinkedDummy</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetObjectMatrix" id="ikSetObjectMatrix"></a>ikSetObjectMatrix</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the transformation matrix of an object. If the object is a joint object, the matrix does not include the joint's intrinsic transformation.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetObjectMatrix(int objectHandle,int relativeToObjectHandle,const C4X4Matrix* matrix)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>objectHandle</strong>: the handle of the object.</div>
<div><strong>relativeToObjectHandle</strong>: the handle of an object relative to which the matrix is expressed. Otherwise, specify ik_handle_world if you specify the absolute matrix, or ik_handle_parent if you specify the matrix relative to the parent object.</div>
<div><strong>matrix</strong>: the transformation matrix</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetObjectMatrix">ikGetObjectMatrix</a>, <a href="#ikSetObjectTransformation">ikSetObjectTransformation</a>, <a href="#ikSetJointPosition">ikSetJointPosition</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetObjectParent" id="ikSetObjectParent"></a>ikSetObjectParent</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the parent of an object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetObjectParent(int objectHandle,int parentObjectHandle,bool keepInPlace)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>objectHandle</strong>: the handle of the object.</div>
<div><strong>parentObjectHandle</strong>: the desired parent object, Set -1 for no parent.</div>
<div><strong>keepInPlace</strong>: if true, the object will stay in place, otherwise, it will keep its local transformation.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetObjectParent">ikGetObjectParent</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetObjectTransformation" id="ikSetObjectTransformation"></a>ikSetObjectTransformation</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the transformation (position and quaternion) of an object. If the object is a joint object, the transformation does not include the joint's intrinsic transformation.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetObjectTransformation(int objectHandle,int relativeToObjectHandle,const C7Vector* transf)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>objectHandle</strong>: the handle of the object.</div>
<div><strong>relativeToObjectHandle</strong>: the handle of an object relative to which the transformation is expressed. Otherwise, specify ik_handle_world if you specify the absolute transformation, or ik_handle_parent if you specify the transformation relative to the parent object.</div>
<div><strong>transf</strong>: the transformation.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetObjectTransformation">ikGetObjectTransformation</a>, <a href="#ikSetObjectMatrix">ikSetObjectMatrix</a>, <a href="#ikSetJointPosition">ikSetJointPosition</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetSphericalJointMatrix" id="ikSetSphericalJointMatrix"></a>ikSetSphericalJointMatrix</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the rotation transformation matrix of a spherical joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetSphericalJointMatrix(int jointHandle,const C3X3Matrix* rotMatrix)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>rotMatrix</strong>: the rotation transformation matrix to apply.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetJointMatrix">ikGetJointMatrix</a>, <a href="#ikSetJointPosition">ikSetJointPosition</a>, <a href="#ikSetSphericalJointQuaternion">ikSetSphericalJointQuaternion</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetSphericalJointQuaternion" id="ikSetSphericalJointQuaternion"></a>ikSetSphericalJointQuaternion</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the rotation transformation of a spherical joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetSphericalJointQuaternion(int jointHandle,const C4Vector* quaternion)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>quaternion</strong>: the rotation transformation to apply.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetJointTransformation">ikGetJointTransformation</a>, <a href="#ikSetSphericalJointMatrix">ikSetSphericalJointMatrix</a>, <a href="#ikSetJointPosition">ikSetJointPosition</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSetTargetDummy" id="ikSetTargetDummy"></a>ikSetTargetDummy</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Associates a tip dummy with a target dummy, or removes that association. If the tip dummy is already associated with another target dummy, then first remove that association before setting another one</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSetTargetDummy(int tipDummyHandle,int targetDummyHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>tipDummyHandle</strong>: the handle of the tip dummy</div>
<div><strong>targetDummyHandle</strong>: the handle of the dummy to become the target of the tip, or -1 to remove an existing target association from the tip dummy</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikGetTargetDummy">ikGetTargetDummy</a>, <a href="#ikGetObjectHandle">ikGetObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="ikSwitchEnvironment" id="ikSwitchEnvironment"></a>ikSwitchEnvironment</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Switches to another environment and all function calls will be directed to that environment.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCSyn">Synopsis</td>
<td class="apiTableRightCSyn">bool ikSwitchEnvironment(int handle,bool allowAlsoProtectedEnvironment=false)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCParam">Arguments</td>
<td class="apiTableRightCParam">
<div><strong>handle</strong>: handle of the environment to switch to.</div>
<div><strong>allowAlsoProtectedEnvironment</strong>: set to false.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftCRet">Return value</td>
<td class="apiTableRightCRet">true in case of success.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#ikCreateEnvironment">ikCreateEnvironment</a>, <a href="#ikEraseEnvironment">ikEraseEnvironment</a></td>
</tr>
</table>
<br>

</td></tr>
</table></div>
<script type="text/javascript">
//
view = getParameterByName('view')
document.getElementById('alphabetical').style.display = view == 'alphabetical' ? 'table-cell' : 'none'
document.getElementById('category').style.display = view == 'category' ? 'table-cell' : 'none'
document.getElementById('commands').style.display = view == null ? 'table-cell' : 'none'
document.getElementById('enums').style.display = view == null ? 'table-cell' : 'none'
document.getElementById('structs').style.display = view == null ? 'table-cell' : 'none'
document.getElementById('scriptFunctions').style.display = view == null ? 'table-cell' : 'none'
//
                </script>
</body>
</html>
